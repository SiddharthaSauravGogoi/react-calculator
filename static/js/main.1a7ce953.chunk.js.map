{"version":3,"sources":["utils/index.js","App.js","components/CalculatorButton.jsx","components/ScientificMode/ScientificMode.jsx","index.js"],"names":["calculatorData","scientificData","ArrayToString","array","join","CalCulateFinalResult","finalNumber","symbol","intermediateResult","finalNumberToArray","split","reverse","getLastInputAndSymbol","swapDisplay","operation","stack","lastNumber","foundSymbol","i","length","numberAndSign","number","sign","App","React","useState","scientificMode","updateScientificMode","dark","setDark","updateStack","updateIntermediateResult","updateSwapDisplay","displayResult","updateDisplayResult","toggleScientificMode","toggle","themeStatus","localStorage","setItem","JSON","stringify","useEffect","isDark","getItem","themes","backgroundColor","color","pageColor","light","getInput","input","tempResult","eval","alert","sum","performScientificOperations","changedSign","parseInt","squaredNumber","squareRoot","Math","sqrt","toFixed","theme","themeDark","className","style","onClick","map","item","key","calculations","CalculatorButton","props","children","ScientificMode","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1a7ce953.chunk.js","sourcesContent":["const calculatorData = [\n  1,\n  2,\n  3,\n  'Add(+)',\n  4,\n  5,\n  6,\n  'Subtract(-)',\n  7,\n  8,\n  9,\n  'Multiply(*)',\n  'Clear',\n  0,\n  '=',\n  'Divide(/)',\n];\n\nconst scientificData = ['square', 'square root', 'Â±'];\n\nconst ArrayToString = (array) => {\n  let convertedString = array.join('');\n  return convertedString;\n}\n/**\n * Takes an array, the latest symbol & the intermediateResult stored up to the previous evaluation\n * @returns 'sum' after perform necessary type conversions\n */\nconst CalCulateFinalResult = (finalNumber, symbol, intermediateResult) => {\n  let finalNumberToArray = finalNumber.split('');\n  let finalNumberArrayToString = finalNumberToArray.reverse();\n  finalNumber = finalNumberArrayToString.join('');\n  let sum = intermediateResult + symbol + finalNumber;\n  return sum;\n}\n\n/**\n * Runs a loop to get the latest symbol and the digit, to perform the final calculation on hitting '='\n */\nconst getLastInputAndSymbol = (array, intermediateResult, swapDisplay, operation) => {\n  let stack = ArrayToString(array);\n  let symbol;\n  let lastNumber = \"\";\n  let foundSymbol = false;\n  for (let i = stack.length - 1; i !== 0; i--) {\n    if (stack[i] === '+') {\n      symbol = stack[i];\n      foundSymbol = true;\n      break;\n    }\n    else if (stack[i] === '*') {\n      symbol = stack[i];\n      foundSymbol = true;\n      break;\n    }\n    else if (stack[i] === '-') {\n      symbol = stack[i];\n      foundSymbol = true;\n      break;\n    }\n    else if (stack[i] === '/') {\n      symbol = stack[i];\n      foundSymbol = true;\n      break;\n    }\n    lastNumber += stack[i]\n  }\n  let sum;\n  let numberAndSign = {\n    number: lastNumber,\n    sign: symbol\n  }\n  if (foundSymbol) {\n    if (operation === 'finalResult') {\n      if (intermediateResult) {\n        sum = CalCulateFinalResult(lastNumber, symbol, intermediateResult);\n        return sum;\n      }\n      else {\n        sum = CalCulateFinalResult(lastNumber, symbol, swapDisplay);\n        return sum;\n      }\n    }\n    else {\n      return numberAndSign;\n    }\n  }\n  else {\n    if (operation === 'finalResult') {\n      sum = lastNumber;\n      return sum;\n    }\n    else {\n      return numberAndSign;\n    }\n  }\n\n}\n\n\n\nexport { ArrayToString, CalCulateFinalResult, getLastInputAndSymbol, calculatorData, scientificData}","import React, { useState } from 'react';\nimport './App.css';\nimport CalculatorButton from './components/CalculatorButton';\nimport ScientificMode from './components/ScientificMode/ScientificMode';\nimport { ArrayToString, getLastInputAndSymbol, calculatorData } from './utils';\n\nfunction App() {\n\n  const [scientificMode, updateScientificMode] = React.useState(false);\n  const [dark, setDark] = React.useState(false);\n  const [stack, updateStack] = useState([]);\n  const [intermediateResult, updateIntermediateResult] = useState(0);\n  const [swapDisplay, updateSwapDisplay] = useState(null);\n  const [displayResult, updateDisplayResult] = useState([]);\n\n  const toggleScientificMode = () => {\n    updateScientificMode(!scientificMode);\n  }\n\n  const toggle = (themeStatus) => {\n    if (themeStatus === 'light') {\n      const isDark = false;\n      localStorage.setItem('dark', JSON.stringify(isDark));\n      setDark(isDark);\n    }\n    else {\n      const isDark = true;\n      localStorage.setItem('dark', JSON.stringify(isDark));\n      setDark(isDark);\n    }\n  }\n\n  React.useEffect(() => {\n    const isDark = localStorage.getItem('dark') === 'true';\n    setDark(isDark);\n  }, [dark])\n\n  const themes = {\n    dark: {\n      backgroundColor: '#666',\n      color: '#fff',\n      pageColor: '#000'\n    },\n    light: {\n      backgroundColor: '#f0f0f0',\n      color: '#000',\n      pageColor: '#fff'\n    }\n  }\n\n  /**\n   * Gets input onclick. Evaluates expression if any operator is clicked, else just pushes it into the stack\n   */\n  const getInput = (input) => {\n    if (input === 'Add(+)') {\n      if (stack[stack.length - 1] !== '+') {\n        updateStack([...stack, '+']);\n        let tempResult = ArrayToString(stack);\n        updateDisplayResult([]);\n        updateIntermediateResult(eval(tempResult));\n      }\n    }\n    else if (input === 'Subtract(-)') {\n      if (stack[stack.length - 1] !== '-') {\n        updateStack([...stack, '-']);\n        let tempResult = ArrayToString(stack);\n        updateDisplayResult([]);\n        updateIntermediateResult(eval(tempResult));\n      }\n    }\n    else if (input === 'Multiply(*)') {\n      if (stack[stack.length - 1] !== '*') {\n        updateStack([...stack, '*']);\n        let tempResult = ArrayToString(stack);\n        updateDisplayResult([]);\n        updateIntermediateResult(eval(tempResult));\n      }\n    }\n    else if (input === 'Divide(/)') {\n      if (stack[stack.length - 1] !== '/') {\n        updateStack([...stack, '/']);\n        let tempResult = ArrayToString(stack);\n        updateDisplayResult([]);\n        updateIntermediateResult(eval(tempResult));\n      }\n    }\n    else if (input === '=') {\n      if (stack.length) {\n        let tempResult = ArrayToString(stack);\n        if ((tempResult[tempResult.length - 1] === '+') || (tempResult[tempResult.length - 1] === '-') || (tempResult[tempResult.length] === '*') || (tempResult[tempResult.length] === '/')) {\n          alert('Needs an operand!');\n        }\n        else {\n          let sum = getLastInputAndSymbol(stack, intermediateResult, swapDisplay, 'finalResult');\n          updateDisplayResult([]);\n          updateIntermediateResult(eval(sum));\n        }\n      }\n    }\n    else if (input === 'Clear') {\n      updateStack([]);\n      updateIntermediateResult(0);\n      updateDisplayResult([]);\n      updateSwapDisplay(null);\n    }\n    else {\n      updateStack([...stack, input])\n      if (intermediateResult) {\n        updateSwapDisplay(intermediateResult);\n        updateIntermediateResult(null);\n      }\n      else if (displayResult) {\n        updateIntermediateResult(null);\n      }\n      else {\n        let tempResult = ArrayToString(stack);\n        updateIntermediateResult(tempResult);\n      }\n      updateDisplayResult([...displayResult, input]);\n    }\n\n  }\n\n  /**\n   * Performs scientific operations and clears the stack.\n   */\n  const performScientificOperations = (input) => {\n    if (input === 'Â±') {\n      if (displayResult.length) {\n        let changedSign = parseInt(ArrayToString(displayResult)) * -1;\n        updateDisplayResult([changedSign]);\n        updateStack([]);\n      }\n      else {\n        let changedSign = intermediateResult * -1;\n        updateIntermediateResult(changedSign);\n        updateStack([]);\n      }\n    }\n    else if (input === 'square') {\n      let squaredNumber;\n      if (displayResult.length) {\n        squaredNumber = parseInt(ArrayToString(displayResult));\n        squaredNumber *= squaredNumber;\n        updateDisplayResult([squaredNumber]);\n        updateStack([])\n      } else {\n        squaredNumber = intermediateResult * intermediateResult;\n        updateIntermediateResult(squaredNumber);\n        updateStack([]);\n      }\n    }\n    else {\n      let squareRoot;\n      if (displayResult.length) {\n        squareRoot = Math.sqrt(parseInt(ArrayToString(displayResult))).toFixed(2);\n        updateDisplayResult([squareRoot]);\n        updateStack([]);\n      }\n      else {\n        squareRoot = Math.sqrt(intermediateResult).toFixed(2);\n        updateIntermediateResult(squareRoot);\n        updateStack([]);\n      }\n    }\n\n  }\n\n  const theme = dark ? themes.dark : themes.light\n  const themeDark = !dark ? themes.dark : themes.light\n\n  return (\n    <div className=\"container\" style={{ backgroundColor: theme.pageColor, color: theme.color }}>\n\n      <div>\n        <button onClick={toggleScientificMode} style={{ backgroundColor: theme.backgroundColor, color: theme.color }}>Scientifc Mode</button>\n\n        <div className=\"toggle-theme-buttons\" >\n          <button className=\"toggle-button\" onClick={() => toggle('light')} style={{ backgroundColor: theme.backgroundColor, color: theme.color }}>Light</button>\n          <button className=\"toggle-button\" onClick={() => toggle('dark')} style={{ backgroundColor: themeDark.backgroundColor, color: themeDark.color }}>Dark</button>\n        </div>\n\n        <div className=\"calulator-wrapper result-display\" style={{ backgroundColor: theme.backgroundColor, color: theme.color }}>\n            <div className=\"stack-display\">\n              {stack}\n            </div>\n            <div className=\"current-input\">\n            {displayResult}  {intermediateResult}\n          </div>\n        </div>\n\n        <div className=\"calculator-wrapper\">\n          {calculatorData.map((item, key) => (\n            <CalculatorButton key={key} style={{ backgroundColor: theme.backgroundColor }} getInput={getInput}>\n              {item}\n            </CalculatorButton>\n          ))}\n        </div>\n\n        {\n          scientificMode ?\n            <ScientificMode style={{ backgroundColor: theme.backgroundColor, color: theme.color }}\n              calculations={{ performScientificOperations }}\n            /> : null\n        }\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction CalculatorButton(props) {\n\n  return (\n    <div className=\"square\" onClick={() => props.getInput(props.children)} style={{ backgroundColor: props.style.backgroundColor }}>\n      {props.children}\n    </div>\n  )\n}\n\nCalculatorButton.propTypes = {\n  getInput: PropTypes.func,\n  style: PropTypes.object,\n};\n\nexport default CalculatorButton;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { scientificData } from '../../utils/index'\n\nfunction ScientificMode(props) {\n  return (\n    <div className=\"calculator-wrapper\">\n      {scientificData.map((item, key) => (\n        <div className=\"square\" key={key} onClick={() => props.calculations.performScientificOperations(item)} style={{ color: props.style.color, backgroundColor: props.style.backgroundColor }}>\n          {item}\n        </div>\n      ))}\n    </div>\n  )\n}\n\nScientificMode.propTypes = {\n  performScientificOperations: PropTypes.func,\n  style: PropTypes.object,\n};\n\nexport default ScientificMode","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <App />\n    , document.getElementById('root'));\n\n"],"sourceRoot":""}